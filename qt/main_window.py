# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\encryption.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLabel, QMessageBox
from encryption import decrypt_key, decrypt_file
from encryption import encrypt_file
from qt.utils import get_usb_drives, get_resource_path
import os


class Ui_widget(object):
    def setupUi(self, widget):
        self.widget = widget
        widget.setObjectName("widget")
        widget.resize(1500, 712)

        # 设置窗口的主布局
        self.mainLayout = QtWidgets.QVBoxLayout(widget)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)  # 去除边距
        self.mainLayout.setSpacing(0)  # 去除布局之间的间距

        # 标题部分
        self.label = QtWidgets.QLabel(widget)
        font = QtGui.QFont()
        font.setFamily("Adobe 宋体 Std L")
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.mainLayout.addWidget(self.label, stretch=2)

        # 中间部分（加密和解密）
        self.middleLayout = QtWidgets.QHBoxLayout()
        self.middleLayout.setSpacing(10)

        # 加密部分
        self.encryptionLayout = QtWidgets.QVBoxLayout()
        self.encryptionLayout.setSpacing(10)

        self.encryption_input_label = QtWidgets.QLabel(widget)
        self.encryption_input_label.setAlignment(QtCore.Qt.AlignCenter)
        self.encryption_input_label.setObjectName("encryption_input_label")
        self.encryptionLayout.addWidget(self.encryption_input_label)

        self.encryption_input = QtWidgets.QHBoxLayout()
        self.encryption_input_lineEdit = QtWidgets.QLineEdit(widget)
        self.encryption_input.addWidget(self.encryption_input_lineEdit)
        self.encryption_input_button = QtWidgets.QPushButton(widget)
        self.encryption_input_button.setObjectName("encryption_input_button")
        self.encryption_input.addWidget(self.encryption_input_button)
        self.encryptionLayout.addLayout(self.encryption_input)

        self.encryption_output_label = QtWidgets.QLabel(widget)
        self.encryption_output_label.setAlignment(QtCore.Qt.AlignCenter)
        self.encryption_output_label.setObjectName("encryption_output_label")
        self.encryptionLayout.addWidget(self.encryption_output_label)

        self.encryption_output = QtWidgets.QHBoxLayout()
        self.encrytion_output_lineEdit = QtWidgets.QLineEdit(widget)
        self.encryption_output.addWidget(self.encrytion_output_lineEdit)
        self.encryption_output_button = QtWidgets.QPushButton(widget)
        self.encryption_output_button.setObjectName("encryption_output_button")
        self.encryption_output.addWidget(self.encryption_output_button)
        self.encryptionLayout.addLayout(self.encryption_output)

        self.encryption_button = QtWidgets.QPushButton(widget)
        self.encryption_button.setObjectName("encryption_button")
        self.encryptionLayout.addWidget(self.encryption_button)

        self.middleLayout.addLayout(self.encryptionLayout, stretch=1)

        # 解密部分
        self.decryptionLayout = QtWidgets.QVBoxLayout()
        self.decryptionLayout.setSpacing(10)

        self.decryption_input_label = QtWidgets.QLabel(widget)
        self.decryption_input_label.setAlignment(QtCore.Qt.AlignCenter)
        self.decryption_input_label.setObjectName("decryption_input_label")
        self.decryptionLayout.addWidget(self.decryption_input_label)

        self.decryption_input = QtWidgets.QHBoxLayout()
        self.decryption_input_lineEdit = QtWidgets.QLineEdit(widget)
        self.decryption_input.addWidget(self.decryption_input_lineEdit)
        self.decryption_input_button = QtWidgets.QPushButton(widget)
        self.decryption_input_button.setObjectName("decryption_input_button")
        self.decryption_input.addWidget(self.decryption_input_button)
        self.decryptionLayout.addLayout(self.decryption_input)

        self.decryption_output_label = QtWidgets.QLabel(widget)
        self.decryption_output_label.setAlignment(QtCore.Qt.AlignCenter)
        self.decryption_output_label.setObjectName("decryption_output_label")
        self.decryptionLayout.addWidget(self.decryption_output_label)

        self.decryption_output = QtWidgets.QHBoxLayout()
        self.decryption_output_lineEdit = QtWidgets.QLineEdit(widget)
        self.decryption_output.addWidget(self.decryption_output_lineEdit)
        self.decryption_output_button = QtWidgets.QPushButton(widget)
        self.decryption_output_button.setObjectName("decryption_output_button")
        self.decryption_output.addWidget(self.decryption_output_button)
        self.decryptionLayout.addLayout(self.decryption_output)

        self.decryption_button = QtWidgets.QPushButton(widget)
        self.decryption_button.setObjectName("decryption_button")
        self.decryptionLayout.addWidget(self.decryption_button)

        self.middleLayout.addLayout(self.decryptionLayout, stretch=1)
        self.mainLayout.addLayout(self.middleLayout, stretch=8)

        # 日志部分
        self.log = QtWidgets.QTextBrowser(widget)
        self.log.setMinimumHeight(40)
        self.log.setObjectName("log")
        self.mainLayout.addWidget(self.log, stretch=1)

        self.retranslateUi(widget)

        self.encryption_input_button.clicked.connect(lambda: self.select_file(self.encryption_input_lineEdit))
        self.encryption_output_button.clicked.connect(lambda: self.select_folder(self.encrytion_output_lineEdit))

        self.decryption_input_button.clicked.connect(lambda: self.select_file(self.decryption_input_lineEdit))
        self.decryption_output_button.clicked.connect(lambda: self.select_folder(self.decryption_output_lineEdit))

        self.encryption_button.clicked.connect(self.encryption_data)
        self.decryption_button.clicked.connect(self.decryption_data)

        QtCore.QMetaObject.connectSlotsByName(widget)

    def retranslateUi(self, widget):
        _translate = QtCore.QCoreApplication.translate
        widget.setWindowTitle(_translate("widget", "文件加密解密器"))
        self.label.setText(_translate("widget", "欢迎使用文件加密器"))
        self.encryption_input_label.setText(_translate("widget", "选择加密文件"))
        self.encryption_input_button.setText(_translate("widget", "选择文件"))
        self.encryption_output_label.setText(_translate("widget", "选择输出地址"))
        self.encryption_output_button.setText(_translate("widget", "选择文件"))
        self.encryption_button.setText(_translate("widget", "加密"))
        self.decryption_input_label.setText(_translate("widget", "选择解密文件"))
        self.decryption_input_button.setText(_translate("widget", "选择文件"))
        self.decryption_output_label.setText(_translate("widget", "选择输出路径"))
        self.decryption_output_button.setText(_translate("widget", "输出地址"))
        self.decryption_button.setText(_translate("widget", "解密"))
        self.encryption_input_lineEdit.setText("请选择需要加密的文件...")
        self.encrytion_output_lineEdit.setText("请选择加密后文件输出路径...")
        self.decryption_input_lineEdit.setText("请选择需要解密的文件...")
        self.decryption_output_lineEdit.setText("请选择解密后文件输出路径...")

    def select_file(self, line_edit):
        # 打开文件选择对话框
        file_path, _ = QFileDialog.getOpenFileName(self.widget, '选择文件', '', '所有文件 (*)')
        if file_path:
            line_edit.setText(f'{file_path}')
            # self.log.setText(f"加密选择文件：{file_path}")
        else:
            line_edit.setText('未选择文件')

    def select_folder(self, line_edit):
        # 打开文件夹选择对话框
        folder_path = QFileDialog.getExistingDirectory(self.widget, "选择文件夹", "")
        if folder_path:
            line_edit.setText(folder_path)
        else:
            line_edit.setText("未选择文件夹")

    def encryption_data(self):
        self.log.setText("加密中...")
        self.mainLayout.invalidate()
        # 获取U盘盘符，加载密钥地址
        usb_drives = get_usb_drives()
        data_path = self.encryption_input_lineEdit.text()
        output_path = self.encrytion_output_lineEdit.text()
        private_key = get_resource_path('key/private_key.pem')

        if not self.check_input(usb_drives, data_path, output_path, private_key):
            self.mainLayout.invalidate()
            return

        aes_key = decrypt_key(f'{usb_drives[0]}/.key/key.enc', private_key)
        # 获取文件名以及后缀
        file_name_with_extension = os.path.basename(data_path)
        file_name_without_extension, file_extension = os.path.splitext(file_name_with_extension)
        try:
            encrypt_file(input_path=data_path, output_path=f"{output_path}/{file_name_without_extension}.enc",
                         key=aes_key)
            self.log.setText('加密完成！')
            self.mainLayout.invalidate()
            QMessageBox.information(self.mainLayout, "提示", "文件加密完成！")
        except Exception as e:
            QMessageBox.critical(self.mainLayout, "错误", f"加密失败：{str(e)}")

    def check_input(self, usb_drivers, data_path, output_path, private_key):
        if data_path == "请选择需要加密的文件..." or output_path == '未选择输出文件路径...':
            self.log.setText("未选择文件或输出目录，请检查输入目录！")
            return False
        if data_path == "未选择文件" or output_path == '未选择文件夹' or private_key is None:
            self.log.setText("未选择文件或输出目录，请检查输入目录！")
            return False
        if len(usb_drivers) == 0:
            self.log.setText("未插入U盘，获取密钥失败！")
            return False
        return True

    def decryption_data(self):
        self.log.setText('解密中...')
        self.mainLayout.invalidate()

        data_path = self.decryption_input_lineEdit.text()
        output_path = self.decryption_output_lineEdit.text()

        usb_drives = get_usb_drives()
        private_key = get_resource_path('key/private_key.pem')

        if not self.check_input(usb_drives, data_path, output_path, private_key):
            self.mainLayout.invalidate()
            return

        try:
            aes_key = decrypt_key(f"{usb_drives[0]}/.key/key.enc", private_key)
            decrypt_file(f"{data_path}", f"{output_path}", aes_key)
            QMessageBox.information(self.widget, "提示", "文件解密完成！")
        except Exception as e:
            QMessageBox.critical(self.widget, "错误", f"解密失败：{str(e)}")
        self.log.setText('解密完成!')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    widget = QtWidgets.QWidget()
    ui = Ui_widget()
    ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec_())
